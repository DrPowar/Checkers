// <auto-generated />
using System;
using Checkers.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Checkers.Infrastructure.Migrations
{
    [DbContext(typeof(CheckersDbContext))]
    partial class CheckersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Checkers.Domain.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentTurnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTurnId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Checkers.Domain.Models.Move", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ToId");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("Checkers.Domain.Models.Piece", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsKing")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MoveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("PieceColor")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("MoveId");

                    b.HasIndex("PositionId");

                    b.ToTable("Pieces");
                });

            modelBuilder.Entity("Checkers.Domain.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("PieceColor")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Checkers.Domain.Models.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Checkers.Domain.Models.Game", b =>
                {
                    b.HasOne("Checkers.Domain.Models.Player", "CurrentTurn")
                        .WithMany()
                        .HasForeignKey("CurrentTurnId");

                    b.Navigation("CurrentTurn");
                });

            modelBuilder.Entity("Checkers.Domain.Models.Move", b =>
                {
                    b.HasOne("Checkers.Domain.Models.Position", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Checkers.Domain.Models.Game", "Game")
                        .WithMany("Moves")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Checkers.Domain.Models.Player", "Player")
                        .WithMany("Moves")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Checkers.Domain.Models.Position", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Checkers.Domain.Models.Piece", b =>
                {
                    b.HasOne("Checkers.Domain.Models.Game", null)
                        .WithMany("Board")
                        .HasForeignKey("GameId");

                    b.HasOne("Checkers.Domain.Models.Move", null)
                        .WithMany("CapturedPieces")
                        .HasForeignKey("MoveId");

                    b.HasOne("Checkers.Domain.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Checkers.Domain.Models.Player", b =>
                {
                    b.HasOne("Checkers.Domain.Models.Game", null)
                        .WithMany("Players")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("Checkers.Domain.Models.Game", b =>
                {
                    b.Navigation("Board");

                    b.Navigation("Moves");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("Checkers.Domain.Models.Move", b =>
                {
                    b.Navigation("CapturedPieces");
                });

            modelBuilder.Entity("Checkers.Domain.Models.Player", b =>
                {
                    b.Navigation("Moves");
                });
#pragma warning restore 612, 618
        }
    }
}
